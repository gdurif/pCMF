// Generated by using Rcpp::compileAttributes() -> do not edit by hand
// Generator token: 10BE3573-1514-4C36-9D1C-5A225CD40393

#include "../inst/include/pCMF.h"
#include <RcppEigen.h>
#include <Rcpp.h>

using namespace Rcpp;

// run_gap_factor
SEXP run_gap_factor(SEXP X, int K, Rcpp::Nullable<MatrixXd> U, Rcpp::Nullable<MatrixXd> V, bool verbose, bool monitor, int iter_max, int iter_min, Rcpp::CharacterVector init_mode, double epsilon, int additional_iter, int conv_mode, int ninit, int iter_init, int ncores, bool reorder_factor, Rcpp::Nullable<uint32_t> seed, Rcpp::Nullable<MatrixXd> a1, Rcpp::Nullable<MatrixXd> a2, Rcpp::Nullable<MatrixXd> b1, Rcpp::Nullable<MatrixXd> b2, Rcpp::Nullable<MatrixXd> alpha1, Rcpp::Nullable<MatrixXd> alpha2, Rcpp::Nullable<MatrixXd> beta1, Rcpp::Nullable<MatrixXd> beta2);
RcppExport SEXP _pCMF_run_gap_factor(SEXP XSEXP, SEXP KSEXP, SEXP USEXP, SEXP VSEXP, SEXP verboseSEXP, SEXP monitorSEXP, SEXP iter_maxSEXP, SEXP iter_minSEXP, SEXP init_modeSEXP, SEXP epsilonSEXP, SEXP additional_iterSEXP, SEXP conv_modeSEXP, SEXP ninitSEXP, SEXP iter_initSEXP, SEXP ncoresSEXP, SEXP reorder_factorSEXP, SEXP seedSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP beta1SEXP, SEXP beta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type monitor(monitorSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< int >::type iter_min(iter_minSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type init_mode(init_modeSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type additional_iter(additional_iterSEXP);
    Rcpp::traits::input_parameter< int >::type conv_mode(conv_modeSEXP);
    Rcpp::traits::input_parameter< int >::type ninit(ninitSEXP);
    Rcpp::traits::input_parameter< int >::type iter_init(iter_initSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type reorder_factor(reorder_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<uint32_t> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta2(beta2SEXP);
    rcpp_result_gen = Rcpp::wrap(run_gap_factor(X, K, U, V, verbose, monitor, iter_max, iter_min, init_mode, epsilon, additional_iter, conv_mode, ninit, iter_init, ncores, reorder_factor, seed, a1, a2, b1, b2, alpha1, alpha2, beta1, beta2));
    return rcpp_result_gen;
END_RCPP
}
// run_poisson_nmf
SEXP run_poisson_nmf(SEXP X, int K, Rcpp::Nullable<MatrixXd> U, Rcpp::Nullable<MatrixXd> V, bool verbose, bool monitor, int iter_max, int iter_min, double epsilon, int additional_iter, int conv_mode, int ninit, int iter_init, int ncores, bool reorder_factor, Rcpp::Nullable<uint32_t> seed);
RcppExport SEXP _pCMF_run_poisson_nmf(SEXP XSEXP, SEXP KSEXP, SEXP USEXP, SEXP VSEXP, SEXP verboseSEXP, SEXP monitorSEXP, SEXP iter_maxSEXP, SEXP iter_minSEXP, SEXP epsilonSEXP, SEXP additional_iterSEXP, SEXP conv_modeSEXP, SEXP ninitSEXP, SEXP iter_initSEXP, SEXP ncoresSEXP, SEXP reorder_factorSEXP, SEXP seedSEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type monitor(monitorSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< int >::type iter_min(iter_minSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type additional_iter(additional_iterSEXP);
    Rcpp::traits::input_parameter< int >::type conv_mode(conv_modeSEXP);
    Rcpp::traits::input_parameter< int >::type ninit(ninitSEXP);
    Rcpp::traits::input_parameter< int >::type iter_init(iter_initSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type reorder_factor(reorder_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<uint32_t> >::type seed(seedSEXP);
    rcpp_result_gen = Rcpp::wrap(run_poisson_nmf(X, K, U, V, verbose, monitor, iter_max, iter_min, epsilon, additional_iter, conv_mode, ninit, iter_init, ncores, reorder_factor, seed));
    return rcpp_result_gen;
END_RCPP
}
// run_sparse_gap_factor
SEXP run_sparse_gap_factor(SEXP X, int K, double sel_bound, Rcpp::Nullable<MatrixXd> U, Rcpp::Nullable<MatrixXd> V, bool verbose, bool monitor, int iter_max, int iter_min, Rcpp::CharacterVector init_mode, double epsilon, int additional_iter, int conv_mode, int ninit, int iter_init, int ncores, bool reorder_factor, Rcpp::Nullable<uint32_t> seed, Rcpp::Nullable<MatrixXd> a1, Rcpp::Nullable<MatrixXd> a2, Rcpp::Nullable<MatrixXd> b1, Rcpp::Nullable<MatrixXd> b2, Rcpp::Nullable<MatrixXd> alpha1, Rcpp::Nullable<MatrixXd> alpha2, Rcpp::Nullable<MatrixXd> beta1, Rcpp::Nullable<MatrixXd> beta2);
RcppExport SEXP _pCMF_run_sparse_gap_factor(SEXP XSEXP, SEXP KSEXP, SEXP sel_boundSEXP, SEXP USEXP, SEXP VSEXP, SEXP verboseSEXP, SEXP monitorSEXP, SEXP iter_maxSEXP, SEXP iter_minSEXP, SEXP init_modeSEXP, SEXP epsilonSEXP, SEXP additional_iterSEXP, SEXP conv_modeSEXP, SEXP ninitSEXP, SEXP iter_initSEXP, SEXP ncoresSEXP, SEXP reorder_factorSEXP, SEXP seedSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP beta1SEXP, SEXP beta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sel_bound(sel_boundSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type monitor(monitorSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< int >::type iter_min(iter_minSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type init_mode(init_modeSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type additional_iter(additional_iterSEXP);
    Rcpp::traits::input_parameter< int >::type conv_mode(conv_modeSEXP);
    Rcpp::traits::input_parameter< int >::type ninit(ninitSEXP);
    Rcpp::traits::input_parameter< int >::type iter_init(iter_initSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type reorder_factor(reorder_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<uint32_t> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta2(beta2SEXP);
    rcpp_result_gen = Rcpp::wrap(run_sparse_gap_factor(X, K, sel_bound, U, V, verbose, monitor, iter_max, iter_min, init_mode, epsilon, additional_iter, conv_mode, ninit, iter_init, ncores, reorder_factor, seed, a1, a2, b1, b2, alpha1, alpha2, beta1, beta2));
    return rcpp_result_gen;
END_RCPP
}
// run_zi_gap_factor
SEXP run_zi_gap_factor(SEXP X, int K, Rcpp::Nullable<MatrixXd> U, Rcpp::Nullable<MatrixXd> V, bool verbose, bool monitor, int iter_max, int iter_min, Rcpp::CharacterVector init_mode, double epsilon, int additional_iter, int conv_mode, int ninit, int iter_init, int ncores, bool reorder_factor, Rcpp::Nullable<uint32_t> seed, Rcpp::Nullable<MatrixXd> a1, Rcpp::Nullable<MatrixXd> a2, Rcpp::Nullable<MatrixXd> b1, Rcpp::Nullable<MatrixXd> b2, Rcpp::Nullable<MatrixXd> alpha1, Rcpp::Nullable<MatrixXd> alpha2, Rcpp::Nullable<MatrixXd> beta1, Rcpp::Nullable<MatrixXd> beta2);
RcppExport SEXP _pCMF_run_zi_gap_factor(SEXP XSEXP, SEXP KSEXP, SEXP USEXP, SEXP VSEXP, SEXP verboseSEXP, SEXP monitorSEXP, SEXP iter_maxSEXP, SEXP iter_minSEXP, SEXP init_modeSEXP, SEXP epsilonSEXP, SEXP additional_iterSEXP, SEXP conv_modeSEXP, SEXP ninitSEXP, SEXP iter_initSEXP, SEXP ncoresSEXP, SEXP reorder_factorSEXP, SEXP seedSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP beta1SEXP, SEXP beta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type monitor(monitorSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< int >::type iter_min(iter_minSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type init_mode(init_modeSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type additional_iter(additional_iterSEXP);
    Rcpp::traits::input_parameter< int >::type conv_mode(conv_modeSEXP);
    Rcpp::traits::input_parameter< int >::type ninit(ninitSEXP);
    Rcpp::traits::input_parameter< int >::type iter_init(iter_initSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type reorder_factor(reorder_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<uint32_t> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta2(beta2SEXP);
    rcpp_result_gen = Rcpp::wrap(run_zi_gap_factor(X, K, U, V, verbose, monitor, iter_max, iter_min, init_mode, epsilon, additional_iter, conv_mode, ninit, iter_init, ncores, reorder_factor, seed, a1, a2, b1, b2, alpha1, alpha2, beta1, beta2));
    return rcpp_result_gen;
END_RCPP
}
// run_zi_sparse_gap_factor
SEXP run_zi_sparse_gap_factor(SEXP X, int K, double sel_bound, Rcpp::Nullable<MatrixXd> U, Rcpp::Nullable<MatrixXd> V, bool verbose, bool monitor, int iter_max, int iter_min, Rcpp::CharacterVector init_mode, double epsilon, int additional_iter, int conv_mode, int ninit, int iter_init, int ncores, bool reorder_factor, Rcpp::Nullable<uint32_t> seed, Rcpp::Nullable<MatrixXd> a1, Rcpp::Nullable<MatrixXd> a2, Rcpp::Nullable<MatrixXd> b1, Rcpp::Nullable<MatrixXd> b2, Rcpp::Nullable<MatrixXd> alpha1, Rcpp::Nullable<MatrixXd> alpha2, Rcpp::Nullable<MatrixXd> beta1, Rcpp::Nullable<MatrixXd> beta2);
RcppExport SEXP _pCMF_run_zi_sparse_gap_factor(SEXP XSEXP, SEXP KSEXP, SEXP sel_boundSEXP, SEXP USEXP, SEXP VSEXP, SEXP verboseSEXP, SEXP monitorSEXP, SEXP iter_maxSEXP, SEXP iter_minSEXP, SEXP init_modeSEXP, SEXP epsilonSEXP, SEXP additional_iterSEXP, SEXP conv_modeSEXP, SEXP ninitSEXP, SEXP iter_initSEXP, SEXP ncoresSEXP, SEXP reorder_factorSEXP, SEXP seedSEXP, SEXP a1SEXP, SEXP a2SEXP, SEXP b1SEXP, SEXP b2SEXP, SEXP alpha1SEXP, SEXP alpha2SEXP, SEXP beta1SEXP, SEXP beta2SEXP) {
BEGIN_RCPP
    Rcpp::RObject rcpp_result_gen;
    Rcpp::RNGScope rcpp_rngScope_gen;
    Rcpp::traits::input_parameter< SEXP >::type X(XSEXP);
    Rcpp::traits::input_parameter< int >::type K(KSEXP);
    Rcpp::traits::input_parameter< double >::type sel_bound(sel_boundSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type U(USEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type V(VSEXP);
    Rcpp::traits::input_parameter< bool >::type verbose(verboseSEXP);
    Rcpp::traits::input_parameter< bool >::type monitor(monitorSEXP);
    Rcpp::traits::input_parameter< int >::type iter_max(iter_maxSEXP);
    Rcpp::traits::input_parameter< int >::type iter_min(iter_minSEXP);
    Rcpp::traits::input_parameter< Rcpp::CharacterVector >::type init_mode(init_modeSEXP);
    Rcpp::traits::input_parameter< double >::type epsilon(epsilonSEXP);
    Rcpp::traits::input_parameter< int >::type additional_iter(additional_iterSEXP);
    Rcpp::traits::input_parameter< int >::type conv_mode(conv_modeSEXP);
    Rcpp::traits::input_parameter< int >::type ninit(ninitSEXP);
    Rcpp::traits::input_parameter< int >::type iter_init(iter_initSEXP);
    Rcpp::traits::input_parameter< int >::type ncores(ncoresSEXP);
    Rcpp::traits::input_parameter< bool >::type reorder_factor(reorder_factorSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<uint32_t> >::type seed(seedSEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a1(a1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type a2(a2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b1(b1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type b2(b2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha1(alpha1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type alpha2(alpha2SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta1(beta1SEXP);
    Rcpp::traits::input_parameter< Rcpp::Nullable<MatrixXd> >::type beta2(beta2SEXP);
    rcpp_result_gen = Rcpp::wrap(run_zi_sparse_gap_factor(X, K, sel_bound, U, V, verbose, monitor, iter_max, iter_min, init_mode, epsilon, additional_iter, conv_mode, ninit, iter_init, ncores, reorder_factor, seed, a1, a2, b1, b2, alpha1, alpha2, beta1, beta2));
    return rcpp_result_gen;
END_RCPP
}

RcppExport SEXP run_testthat_tests();

static const R_CallMethodDef CallEntries[] = {
    {"_pCMF_run_gap_factor", (DL_FUNC) &_pCMF_run_gap_factor, 25},
    {"_pCMF_run_poisson_nmf", (DL_FUNC) &_pCMF_run_poisson_nmf, 16},
    {"_pCMF_run_sparse_gap_factor", (DL_FUNC) &_pCMF_run_sparse_gap_factor, 26},
    {"_pCMF_run_zi_gap_factor", (DL_FUNC) &_pCMF_run_zi_gap_factor, 25},
    {"_pCMF_run_zi_sparse_gap_factor", (DL_FUNC) &_pCMF_run_zi_sparse_gap_factor, 26},
    {"run_testthat_tests",             (DL_FUNC) &run_testthat_tests,              0},
    {NULL, NULL, 0}
};

RcppExport void R_init_pCMF(DllInfo *dll) {
    R_registerRoutines(dll, NULL, CallEntries, NULL, NULL);
    R_useDynamicSymbols(dll, FALSE);
}
